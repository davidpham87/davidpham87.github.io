["^ ","~:output",["^ ","~:js","goog.provide('ajax.json');\ngoog.require('cljs.core');\ngoog.require('ajax.interceptors');\ngoog.require('ajax.protocols');\najax.json.write_json_native = (function ajax$json$write_json_native(data){\nreturn JSON.stringify(cljs.core.clj__GT_js(data));\n});\najax.json.read_json_native = (function ajax$json$read_json_native(raw,keywords_QMARK_,text){\nvar result_raw = JSON.parse(text);\nif(cljs.core.truth_(raw)){\nreturn result_raw;\n} else {\nreturn cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(result_raw,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),keywords_QMARK_], 0));\n}\n});\najax.json.make_json_request_format = (function ajax$json$make_json_request_format(write_json){\nreturn (function ajax$json$make_json_request_format_$_json_request_format(){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"write\",\"write\",-1857649168),write_json,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"application/json\"], null);\n});\n});\najax.json.strip_prefix = (function ajax$json$strip_prefix(prefix,text){\nif(cljs.core.truth_((function (){var and__4120__auto__ = prefix;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),text.indexOf(prefix));\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn text.substring(prefix.length);\n} else {\nreturn text;\n}\n});\najax.json.make_json_response_format = (function ajax$json$make_json_response_format(read_json){\n\nreturn (function() {\nvar ajax$json$make_json_response_format_$_json_response_format = null;\nvar ajax$json$make_json_response_format_$_json_response_format__0 = (function (){\nreturn ajax$json$make_json_response_format_$_json_response_format.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n});\nvar ajax$json$make_json_response_format_$_json_response_format__1 = (function (p__29920){\nvar map__29923 = p__29920;\nvar map__29923__$1 = (((((!((map__29923 == null))))?(((((map__29923.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__29923.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__29923):map__29923);\nvar prefix = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__29923__$1,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465));\nvar keywords_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__29923__$1,new cljs.core.Keyword(null,\"keywords?\",\"keywords?\",764949733));\nvar raw = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__29923__$1,new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272));\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),((function (map__29923,map__29923__$1,prefix,keywords_QMARK_,raw){\nreturn (function ajax$json$make_json_response_format_$_json_response_format_$_json_read_response_format(xhrio){\nvar G__29925 = raw;\nvar G__29926 = keywords_QMARK_;\nvar G__29927 = ajax.json.strip_prefix(prefix,ajax.protocols._body(xhrio));\nreturn (read_json.cljs$core$IFn$_invoke$arity$3 ? read_json.cljs$core$IFn$_invoke$arity$3(G__29925,G__29926,G__29927) : read_json.call(null,G__29925,G__29926,G__29927));\n});})(map__29923,map__29923__$1,prefix,keywords_QMARK_,raw))\n,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"JSON\",(cljs.core.truth_(prefix)?[\" prefix '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix),\"'\"].join(''):null),(cljs.core.truth_(keywords_QMARK_)?\" keywordize\":null)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"application/json\"], null)], null));\n});\najax$json$make_json_response_format_$_json_response_format = function(p__29920){\nswitch(arguments.length){\ncase 0:\nreturn ajax$json$make_json_response_format_$_json_response_format__0.call(this);\ncase 1:\nreturn ajax$json$make_json_response_format_$_json_response_format__1.call(this,p__29920);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\najax$json$make_json_response_format_$_json_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$json$make_json_response_format_$_json_response_format__0;\najax$json$make_json_response_format_$_json_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$json$make_json_response_format_$_json_response_format__1;\nreturn ajax$json$make_json_response_format_$_json_response_format;\n})()\n});\n/**\n * Returns a JSON response format using the native JSON \n * implementation. Options include\n * :keywords? Returns the keys as keywords\n * :prefix A prefix that needs to be stripped off.  This is to\n * combat JSON hijacking.  If you're using JSON with GET request,\n * you should think about using this.\n * http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n * http://haacked.com/archive/2009/06/24/json-hijacking.aspx\n */\najax.json.json_response_format = ajax.json.make_json_response_format(ajax.json.read_json_native);\najax.json.json_request_format = ajax.json.make_json_request_format(ajax.json.write_json_native);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/json.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.json","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^S","~$ajax.protocols","^T","~$cljs.core","^U","~$goog","^V"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$-status","^T","~$-abort","^T","~$-status-text","^T","~$-get-response-header","^T","~$map->ResponseFormat","^S","~$-process-response","^T","~$-was-aborted","^T","~$-process-request","^T","~$-body","^T","~$-js-ajax-request","^T"],"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^N",["^1:",["^X",["^S","~:refer",["^12"]],["^T","^1<",["^16","^15","^13","^[","^Z","^11","^10","^17","^14"]]]]]],"~:flags",["^ ","^X",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^S","^T"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","ajax/json.cljc"],"~:compiled-at",1554047533396,"~:resource-name","ajax/json.cljc","~:warnings",[],"~:source","(ns ajax.json\n  (:require [ajax.interceptors :refer \n                [map->ResponseFormat]]\n            [ajax.protocols :refer\n                [-body -process-request -process-response -abort -status\n                -get-response-header -status-text -js-ajax-request\n                -was-aborted]]\n            #?@ (:clj  [[cheshire.core :as c]\n                        [clojure.java.io :as io]]))\n  #? (:clj (:import [java.io OutputStreamWriter ByteArrayOutputStream\n                InputStreamReader Closeable OutputStream\n                InputStream])))\n\n;;; NB If you're looking to use the google closure JSON implementation,\n;;; You'll need ajax.goog-json instead\n\n#? (:clj (defn write-json-cheshire [stream data]\n           (c/generate-stream data (io/writer stream))))\n\n#? (:cljs (defn write-json-native [data]\n            (.stringify js/JSON (clj->js data))))\n\n#? (:clj (defn read-json-cheshire [raw keywords? text]\n           ; NB Raw is ignored since it makes no sense in this context\n           (c/parse-stream (io/reader text) keywords?)))\n\n#? (:cljs (defn read-json-native [raw keywords? text]\n               (let [result-raw (.parse js/JSON text)]\n                    (if raw\n                        result-raw\n                        (js->clj result-raw :keywordize-keys keywords?)))))\n\n(defn make-json-request-format [write-json]\n  (fn json-request-format []\n      {:write write-json\n       :content-type \"application/json\"}))\n\n#? (:clj (defn strip-prefix\n           ^InputStream [^String prefix ^InputStream text]\n           (if prefix\n             (let [utf8 (.getBytes prefix \"UTF-8\")]\n               (loop [i 0]\n                 (if (and (< i (alength utf8))\n                          (= (aget utf8 i) (.read text)))\n                   (recur (inc i))\n                   text)))\n             text))\n     :cljs (defn strip-prefix [^String prefix text]\n             (if (and prefix (= 0 (.indexOf text prefix)))\n               (.substring text (.-length prefix))\n               text)))\n\n(defn make-json-response-format [read-json]\n  \"Create a json request format given `read-json` function.\"\n  (fn json-response-format\n    ([] (json-response-format {}))\n    ([{:keys [prefix keywords? raw]}]\n       (map->ResponseFormat\n        {:read (fn json-read-response-format [xhrio] \n            (read-json raw\n                       keywords?\n                       (strip-prefix prefix (-body xhrio))))\n         :description (str \"JSON\"\n                         (if prefix (str \" prefix '\" prefix \"'\"))\n                         (if keywords? \" keywordize\"))\n         :content-type [\"application/json\"]}))))\n\n(def json-response-format\n  \"Returns a JSON response format using the native JSON \n   implementation. Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx\"\n    (make-json-response-format \n        #? (:clj read-json-cheshire :cljs read-json-native)))\n\n(def json-request-format \n    (make-json-request-format \n        #? (:clj write-json-cheshire :cljs write-json-native)))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;AAmBU,AAAA,AAAMA,AAAmBC;AAAzB,AACE,AAAYC,AAAQ,AAACC,AAAQF;;AAM/B,AAAA,AAAMG,AAAkBC,AAAIC,AAAUC;AAAtC,AACK,AAAMC,AAAW,AAAQN,AAAQK;AAAjC,AACK,AAAIF;AACAG;;AACA,AAAA,AAACC,AAAQD,AAA4BF;;;AAE7D,AAAA,AAAMI,AAA0BC;AAAhC,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AACYA;;;AAaH,AAAA,AAAMC,AAAsBC,AAAON;AAAnC,AACE,AAAI,AAAAO,AAAKD;AAAL,AAAA,AAAAC;AAAY,AAAA,AAACC,AAAI,AAAUR,AAAKM;;AAAhCC;;;AACF,AAAYP,AAAK,AAAUM;;AAC3BN;;;AAEf,AAAA,AAAMS,AAA2BC;AAAjC,AAAA;AAEE;;;AAAA,AACM,AAAA,AAACO;;AADPN;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEYN;AAFZ,AAAAU,AAAAJ,AAAA,AAEmBb;AAFnB,AAAAiB,AAAAJ,AAAA,AAE6Bd;AAF7B,AAGK,AAAA,AAAA,AAACoB,AACO;AAA+BC;AAA/B,AACH,AAAAC,AAAWtB;AAAXuB,AACWtB;AADXuB,AAEW,AAACjB,AAAaC,AAAO,AAACiB,AAAMJ;AAFvC,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACZ,AAAAA,AAAAA;;AAFN,AAAA,AAAA,AAAA,AAKe,AAAA,AACG,AAAA,AAAIJ,AAAO,AAAA,AAAA,AAAiBA,AAC5B,AAAA,AAAA,AAAIP;;AAV3BY;;;;;AAAAA;;;;;;;;;AAaF;;;;;;;;;;AAAKa,AASD,AAACf,AACqCZ;AAE1C,AAAK4B,AACD,AAACtB,AACsCV","names",["ajax.json/write-json-native","data","js/JSON","cljs.core/clj->js","ajax.json/read-json-native","raw","keywords?","text","result-raw","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","ajax.json/make-json-request-format","write-json","ajax.json/strip-prefix","prefix","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ajax.json/make-json-response-format","read-json","p__29920","map__29923","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax$json$make_json_response_format_$_json_response_format.cljs$core$IFn$_invoke$arity$1","ajax.interceptors/map->ResponseFormat","xhrio","G__29925","G__29926","G__29927","ajax.protocols/-body","ajax.json/json-response-format","ajax.json/json-request-format"]]],"~:cache-keys",["~#cmap",[["~:macro","^U"],[1551476394000],["^1A","goog/math/math.js"],[1551476395000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^1A","goog/array/array.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1T"]]],["^1A","goog/debug/error.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","ajax/interceptors.cljc"],[1549146545000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U","~$clojure.string","~$ajax.util","~$ajax.url","^T"]]],["^1A","goog/dom/nodetype.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","ajax/protocols.cljc"],[1549146545000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U"]]],["^1A","ajax/url.cljc"],[1549146545000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U","^1U","^1V"]]],["^1A","goog/object/object.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],"~:SHADOW-TIMESTAMP",[1554046439000,1551476394000],["^1A","goog/math/long.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1T","~$goog.reflect"]]],["^1A","goog/string/internal.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","goog/functions/functions.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","goog/structs/map.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1A","ajax/util.cljc"],[1549146545000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U","^T"]]],["^1A","goog/asserts/asserts.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1S","^1T","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/base.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",[]]],["^1A","goog/structs/structs.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1S","~$goog.object"]]],["^1N","~$ajax.macros"],[1549146545000],["^1A","clojure/string.cljs"],[1551476394000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U","^22","~$goog.string.StringBuffer"]]],["^1A","ajax/json.cljc"],[1549146545000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^U","^S","^T"]]],["^1A","goog/string/string.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","~$goog.string.internal"]]],["^1A","goog/reflect/reflect.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","goog/string/stringbuffer.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","goog/iter/iter.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1S","^1T","~$goog.functions","~$goog.math"]]],["^1A","cljs/core.cljs"],[1551476394000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["~$goog.math.Long","~$goog.math.Integer","^22","^28","^1S","~$goog.Uri","^2:"]]],["^1N","~$poppea"],[1549146546000],["^1A","goog/math/integer.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V"]]],["^1A","goog/uri/utils.js"],[1551476395000,"^1O",["^ ","^1P",null,"^1Q",["^L",[]],"^1R",["^V","^1S","^1T","^22"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/json.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","^V","^V"],"^W",["^L",["^X"]],"~:shadow/js-access-global",["^L",["JSON"]],"^Y",["^ ","^Z","^T","^[","^T","^10","^T","^11","^T","^12","^S","^13","^T","^14","^T","^15","^T","^16","^T","^17","^T"],"~:defs",["^ ","~$write-json-native",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/json.cljc","^7",20,"^8",17,"^9",20,"^:",34,"~:arglists",["^1:",["~$quote",["^1:",[["~$data"]]]]]],"^M","~$ajax.json/write-json-native","^6","ajax/json.cljc","^:",34,"~:method-params",["^1:",[["^2I"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",11,"~:variadic?",false,"^7",20,"~:ret-tag","~$js","^9",20,"~:max-fixed-arity",1,"~:fn-var",true,"^2G",["^1:",["^2H",["^1:",[["^2I"]]]]]],"~$read-json-native",["^ ","^2F",null,"^5",["^ ","^6","ajax/json.cljc","^7",27,"^8",17,"^9",27,"^:",33,"^2G",["^1:",["^2H",["^1:",[["~$raw","~$keywords?","~$text"]]]]]],"^M","~$ajax.json/read-json-native","^6","ajax/json.cljc","^:",33,"^2K",["^1:",[["^2T","^2U","^2V"]]],"^2L",null,"^2M",["^1:",[null,null]],"^8",11,"^2N",false,"^7",27,"^2O",["^L",[null,"~$clj","~$any","~$cljs.core/MapEntry","^2P"]],"^9",27,"^2Q",3,"^2R",true,"^2G",["^1:",["^2H",["^1:",[["^2T","^2U","^2V"]]]]]],"~$make-json-request-format",["^ ","^2F",null,"^5",["^ ","^6","ajax/json.cljc","^7",33,"^8",7,"^9",33,"^:",31,"^2G",["^1:",["^2H",["^1:",[["~$write-json"]]]]]],"^M","~$ajax.json/make-json-request-format","^6","ajax/json.cljc","^:",31,"^2K",["^1:",[["^30"]]],"^2L",null,"^2M",["^1:",[null,null]],"^8",1,"^2N",false,"^7",33,"^2O","~$function","^9",33,"^2Q",1,"^2R",true,"^2G",["^1:",["^2H",["^1:",[["^30"]]]]]],"~$strip-prefix",["^ ","^2F",null,"^5",["^ ","^6","ajax/json.cljc","^7",48,"^8",18,"^9",48,"^:",30,"^2G",["^1:",["^2H",["^1:",[["~$prefix","^2V"]]]]]],"^M","~$ajax.json/strip-prefix","^6","ajax/json.cljc","^:",30,"^2K",["^1:",[["^34","^2V"]]],"^2L",null,"^2M",["^1:",[null,null]],"^8",12,"^2N",false,"^7",48,"^2O",["^L",[null,"^2Y"]],"^9",48,"^2Q",2,"^2R",true,"^2G",["^1:",["^2H",["^1:",[["^34","^2V"]]]]]],"~$make-json-response-format",["^ ","^2F",null,"^5",["^ ","^6","ajax/json.cljc","^7",53,"^8",7,"^9",53,"^:",32,"^2G",["^1:",["^2H",["^1:",[["~$read-json"]]]]]],"^M","~$ajax.json/make-json-response-format","^6","ajax/json.cljc","^:",32,"^2K",["^1:",[["^37"]]],"^2L",null,"^2M",["^1:",[null,null]],"^8",1,"^2N",false,"^7",53,"^2O","^32","^9",53,"^2Q",1,"^2R",true,"^2G",["^1:",["^2H",["^1:",[["^37"]]]]]],"~$json-response-format",["^ ","^5",["^ ","^6","ajax/json.cljc","^7",68,"^8",6,"^9",68,"^:",26],"^M","~$ajax.json/json-response-format","^6","ajax/json.cljc","^:",26,"^8",1,"^7",68,"^9",68,"~:tag","^32","~:doc","Returns a JSON response format using the native JSON \n   implementation. Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"],"~$json-request-format",["^ ","^M","~$ajax.json/json-request-format","^6","ajax/json.cljc","^7",80,"^8",1,"^9",80,"^:",25,"^5",["^ ","^6","ajax/json.cljc","^7",80,"^8",6,"^9",80,"^:",25],"^3;","^32"]],"^18",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^L",["~:description","~:keywords?","~:read","~:raw","~:prefix","~:write","~:content-type","~:keywordize-keys"]],"~:order",["^3G","^3E","^3F","^3D","^3A","^3C","^3B","^3@"]],"^1=",["^ ","^X",["^L",[]]],"^1>",["^ "],"^1?",["^V","^U","^S","^T"]],"^P","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1M",[["^3K","~:static-fns"],true,["^3K","~:elide-asserts"],false,["^3K","~:optimize-constants"],null,["^3K","^1D"],null,["^3K","~:external-config"],null,["^3K","~:tooling-config"],null,["^3K","~:emit-constants"],null,["^3K","~:load-tests"],null,["^3K","~:infer-externs"],true,["^3K","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3K","~:fn-invoke-direct"],null,["^3K","~:source-map"],"/dev/null"]]]