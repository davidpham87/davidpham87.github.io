["^ ","~:output",["^ ","~:js","goog.provide('ajax.ring');\ngoog.require('cljs.core');\ngoog.require('ajax.interceptors');\ngoog.require('ajax.protocols');\ngoog.require('ajax.formats');\najax.ring.make_ring_read = (function ajax$ring$make_ring_read(body_read){\nreturn (function ajax$ring$make_ring_read_$_ring_read(response){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),ajax.protocols._status(response),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),ajax.protocols._get_all_headers(response),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(body_read.cljs$core$IFn$_invoke$arity$1 ? body_read.cljs$core$IFn$_invoke$arity$1(response) : body_read.call(null,response))], null);\n});\n});\n/**\n * Returns a Ring-compatible response map.\n * \n * Optionally can be passed a :format option. This should be another\n * response-format map. If format is provided it will be used to\n * specify the content-type, and the read method will be used to\n * populate the :body key in the response map.\n */\najax.ring.ring_response_format = (function ajax$ring$ring_response_format(var_args){\nvar G__30034 = arguments.length;\nswitch (G__30034) {\ncase 0:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0()], null));\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1 = (function (p__30039){\nvar map__30040 = p__30039;\nvar map__30040__$1 = (((((!((map__30040 == null))))?(((((map__30040.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30040.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30040):map__30040);\nvar map__30041 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30040__$1,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766));\nvar map__30041__$1 = (((((!((map__30041 == null))))?(((((map__30041.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30041.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30041):map__30041);\nvar read = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30041__$1,new cljs.core.Keyword(null,\"read\",\"read\",1140058661));\nvar description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30041__$1,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544));\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30041__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),ajax.ring.make_ring_read(read),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"ring/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(description)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),content_type], null));\n});\n\najax.ring.ring_response_format.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/ring.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^S","~$ajax.protocols","^T","~$ajax.formats","^U","~$f","^U","~$cljs.core","^V","~$goog","^W"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$map->ResponseFormat","^S","~$-status","^T","~$-get-all-headers","^T","~$-body","^T"],"~:require-macros",["^ ","^V","^V"],"~:form",["~#list",["~$ns","^N",["^15",["^Y",["^S","~:refer",["^["]],["^T","^17",["^10","^11","^12"]],["^U","~:as","~$f"]]]]],"~:flags",["^ ","^Y",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^S","^T","^U"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","ajax/ring.cljc"],"~:compiled-at",1554047533565,"~:resource-name","ajax/ring.cljc","~:warnings",[],"~:source","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring/\" description)\n                         :content-type content-type})))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;;AAKA,AAAA,AAAMA,AAAgBC;AAAtB,AACE,AAAeC;AAAf,AAAA,AAAA,AAAA,AAAA,AACW,AAACC,AAAQD,AACR,AAACE,AAAiBF,AACrB,AAACD,AAAAA,AAAAA,AAAUC,AAAAA;;;AAEtB,AAAA;;;;;;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAOM,AAAA,AAAA,AAACS,AAA8B,AAACC;;;AAPtC,AAAA,AAAA,AAAAR,AAAMF;AAAN,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAH,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAAAA;AAAA,AAAAC,AAAAD,AAAA,AAQaI;AARb,AAAAH,AAAAD,AAAA,AAQkBK;AARlB,AAAAJ,AAAAD,AAAA,AAQ8BM;AAR9B,AASG,AAAA,AAAA,AAAA,AAAA,AAACC,AAA2B,AAACrB,AAAekB,AACT,AAAA,AAAaC,AACZC;;;AAXvC,AAAA,AAAA,AAAMb;;AAAN","names",["ajax.ring/make-ring-read","body-read","response","ajax.protocols/-status","ajax.protocols/-get-all-headers","var_args","G__30034","ajax.ring/ring-response-format","js/Error","p__30039","map__30040","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","map__30041","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0","read","description","content-type","ajax.interceptors/map->ResponseFormat"]]],"~:cache-keys",["~#cmap",[["~:macro","^V"],[1551476394000],["^1=","goog/math/math.js"],[1551476395000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^W","~$goog.array","~$goog.asserts"]]],["^1=","goog/array/array.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1P"]]],["^1=","goog/debug/error.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","ajax/interceptors.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","~$clojure.string","~$ajax.util","~$ajax.url","^T"]]],["^1=","goog/dom/nodetype.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","ajax/protocols.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V"]]],["^1=","ajax/url.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","^1Q","^1R"]]],["^1=","goog/object/object.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],"~:SHADOW-TIMESTAMP",[1554046439000,1551476394000],["^1=","goog/math/long.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1P","~$goog.reflect"]]],["^1=","goog/string/internal.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","goog/functions/functions.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","goog/structs/map.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","ajax/util.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","^T"]]],["^1=","ajax/ring.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","^S","^T","^U"]]],["^1=","goog/asserts/asserts.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/base.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",[]]],["^1=","goog/structs/structs.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1O","~$goog.object"]]],["^1J","~$ajax.macros"],[1549146545000],["^1=","clojure/string.cljs"],[1551476394000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","^1Z","~$goog.string.StringBuffer"]]],["^1=","goog/string/string.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","~$goog.string.internal"]]],["^1=","ajax/formats.cljc"],[1549146545000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^V","^S","^1R","^T"]]],["^1=","goog/reflect/reflect.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","goog/string/stringbuffer.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","goog/iter/iter.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1O","^1P","~$goog.functions","~$goog.math"]]],["^1=","cljs/core.cljs"],[1551476394000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["~$goog.math.Long","~$goog.math.Integer","^1Z","^24","^1O","~$goog.Uri","^26"]]],["^1J","~$poppea"],[1549146546000],["^1=","goog/math/integer.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W"]]],["^1=","goog/uri/utils.js"],[1551476395000,"^1K",["^ ","^1L",null,"^1M",["^L",[]],"^1N",["^W","^1O","^1P","^1Z"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/ring.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","~$f","^U","^V","^V","^W","^W"],"^X",["^L",["^Y"]],"~:shadow/js-access-global",["^L",["Error"]],"^Z",["^ ","^[","^S","^10","^T","^11","^T","^12","^T"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/ring.cljc","^7",6,"^8",7,"^9",6,"^:",21,"~:arglists",["^15",["~$quote",["^15",[["~$body-read"]]]]]],"^M","~$ajax.ring/make-ring-read","^6","ajax/ring.cljc","^:",21,"~:method-params",["^15",[["^2E"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"~:variadic?",false,"^7",6,"~:ret-tag","~$function","^9",6,"~:max-fixed-arity",1,"~:fn-var",true,"^2C",["^15",["^2D",["^15",[["^2E"]]]]]],"~$ring-response-format",["^ ","^2B",null,"^5",["^ ","^6","ajax/ring.cljc","^7",12,"^8",7,"^9",12,"^:",27,"^2C",["^15",["^2D",["^15",[[],[["^1I",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^2J",false,"~:fixed-arity",1,"^2M",1,"^2G",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2C",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2I",["^15",[null,null]]]],"^M","~$ajax.ring/ring-response-format","^6","ajax/ring.cljc","^:",27,"^2V",["^ ","^2J",false,"^2W",1,"^2M",1,"^2G",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2C",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2I",["^15",[null,null]]],"^2G",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2H",null,"^2W",1,"^2I",["^15",[null,null]],"^8",1,"^2J",false,"~:methods",[["^ ","^2W",0,"^2J",false,"~:tag","~$any"],["^ ","^2W",1,"^2J",false,"^2Z","~$ajax.interceptors/ResponseFormat"]],"^7",12,"^9",12,"^2M",1,"^2N",true,"^2C",["^15",[[],[["^1I",[["^ ","^2P",["^2Q","^2R","^2S"]],"^2T"]]]]],"^2U","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"^13",["^ ","^V","^V"],"~:cljs.analyzer/constants",["^ ","^X",["^L",["~:description","^2T","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^35","^34","^37","^2T","^33","^32","^36"]],"^19",["^ ","^Y",["^L",[]]],"^1:",["^ "],"^1;",["^W","^V","^S","^T","^U"]],"^P","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1I",[["^3;","~:static-fns"],true,["^3;","~:elide-asserts"],false,["^3;","~:optimize-constants"],null,["^3;","^1@"],null,["^3;","~:external-config"],null,["^3;","~:tooling-config"],null,["^3;","~:emit-constants"],null,["^3;","~:load-tests"],null,["^3;","~:infer-externs"],true,["^3;","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3;","~:fn-invoke-direct"],null,["^3;","~:source-map"],"/dev/null"]]]